/*
 * eGov Property Registry System.
 * APIs for Property Registry module. This provide APIs for create new property, update existing property, search existing property. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@egovernments.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
/**
 * This is lightweight property object that can be used as reference by definitions needing property linking. Actual Property Object extends this to include more elaborate attributes of the property.
 */
public class PropertyInfo {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("propertyId")
  private String propertyId = null;

  @JsonProperty("linkedProperties")
  private List<String> linkedProperties = null;

  @JsonProperty("tenantId")
  private String tenantId = null;

  @JsonProperty("accountId")
  private String accountId = null;

  @JsonProperty("oldPropertyId")
  private String oldPropertyId = null;

  @JsonProperty("status")
  private Status status = null;

  @JsonProperty("address")
  private Address address = null;

  public PropertyInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique Identifier of the Property for internal reference.
   * @return id
  **/
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PropertyInfo propertyId(String propertyId) {
    this.propertyId = propertyId;
    return this;
  }

   /**
   * Unique Identifier of the Property.
   * @return propertyId
  **/
  public String getPropertyId() {
    return propertyId;
  }

  public void setPropertyId(String propertyId) {
    this.propertyId = propertyId;
  }

  public PropertyInfo linkedProperties(List<String> linkedProperties) {
    this.linkedProperties = linkedProperties;
    return this;
  }

  public PropertyInfo addLinkedPropertiesItem(String linkedPropertiesItem) {
    if (this.linkedProperties == null) {
      this.linkedProperties = new ArrayList<String>();
    }
    this.linkedProperties.add(linkedPropertiesItem);
    return this;
  }

   /**
   * Unique Identifier of the Properties from which the current proeprty is derived.
   * @return linkedProperties
  **/
  public List<String> getLinkedProperties() {
    return linkedProperties;
  }

  public void setLinkedProperties(List<String> linkedProperties) {
    this.linkedProperties = linkedProperties;
  }

  public PropertyInfo tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * tenant id of the Property
   * @return tenantId
  **/
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

  public PropertyInfo accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * UUID of the user to which the property will be associated
   * @return accountId
  **/
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public PropertyInfo oldPropertyId(String oldPropertyId) {
    this.oldPropertyId = oldPropertyId;
    return this;
  }

   /**
   * Old upic no of the Property. ULBs have the existing property in their system/manual records with their identification number, they want to continue the old reference number in this case the same identification number will be captured here.
   * @return oldPropertyId
  **/
  public String getOldPropertyId() {
    return oldPropertyId;
  }

  public void setOldPropertyId(String oldPropertyId) {
    this.oldPropertyId = oldPropertyId;
  }

  public PropertyInfo status(Status status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }

  public PropertyInfo address(Address address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyInfo propertyInfo = (PropertyInfo) o;
    return Objects.equals(this.id, propertyInfo.id) &&
        Objects.equals(this.propertyId, propertyInfo.propertyId) &&
        Objects.equals(this.linkedProperties, propertyInfo.linkedProperties) &&
        Objects.equals(this.tenantId, propertyInfo.tenantId) &&
        Objects.equals(this.accountId, propertyInfo.accountId) &&
        Objects.equals(this.oldPropertyId, propertyInfo.oldPropertyId) &&
        Objects.equals(this.status, propertyInfo.status) &&
        Objects.equals(this.address, propertyInfo.address);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, propertyId, linkedProperties, tenantId, accountId, oldPropertyId, status, address);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyInfo {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    linkedProperties: ").append(toIndentedString(linkedProperties)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    oldPropertyId: ").append(toIndentedString(oldPropertyId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
